"""
Problem Statement:
Tom and Jerry are stuck in a puzzle. They have to assign a number to an alphabet according to Rule1.
Rule1 is they have to assign the lowest number to a letter which is maximum in frequency for example (a, a, a,b,c,b). A is having frequency 3 so it gets the lowest number 0 similarly, b is having a frequency of 2 so it gets to number 1, and so on.......

#Concept: https://www.rani.ai/library/vedikajaint/MLHelpLine/SparkMlib-Functions-.-@vedikajaint
"""

#Code
from pyspark import SparkContext, SparkConf
conf = SparkConf().setAppName("StopWords")
sc = SparkContext(conf=conf)

from pyspark.sql import SparkSession
spark = SparkSession.builder \
          .appName("StringIndexer") \
          .getOrCreate()

from pyspark.ml.feature import StringIndexer
df = spark.createDataFrame(
    [(0, "a"), (1, "b"), (2, "c"), (3, "a"), (4, "a"), (5, "c"), (6, "a"), (7, "b"), (8, "b"), (9, "a"), (10, "c")],
    ["id", "category"])

indexer = StringIndexer(inputCol="category", outputCol="categoryIndex")
indexed = indexer.fit(df).transform(df)
indexed.show()

"""
Output: 

df:pyspark.sql.dataframe.DataFrame = [id: long, category: string]
indexed:pyspark.sql.dataframe.DataFrame = [id: long, category: string ... 1 more fields]
+---+--------+-------------+
| id|category|categoryIndex|
+---+--------+-------------+
|  0|       a|          0.0|
|  1|       b|          1.0|
|  2|       c|          2.0|
|  3|       a|          0.0|
|  4|       a|          0.0|
|  5|       c|          2.0|
|  6|       a|          0.0|
|  7|       b|          1.0|
|  8|       b|          1.0|
|  9|       a|          0.0|
| 10|       c|          2.0|
+---+--------+-------------+
"""



